// Generated by gencpp from file multi_agent_system/StabilityAnalysisResponse.msg
// DO NOT EDIT!


#ifndef MULTI_AGENT_SYSTEM_MESSAGE_STABILITYANALYSISRESPONSE_H
#define MULTI_AGENT_SYSTEM_MESSAGE_STABILITYANALYSISRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multi_agent_system
{
template <class ContainerAllocator>
struct StabilityAnalysisResponse_
{
  typedef StabilityAnalysisResponse_<ContainerAllocator> Type;

  StabilityAnalysisResponse_()
    : is_safe(false)
    , modifications()
    , stability_aware_plan()  {
    }
  StabilityAnalysisResponse_(const ContainerAllocator& _alloc)
    : is_safe(false)
    , modifications(_alloc)
    , stability_aware_plan(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_safe_type;
  _is_safe_type is_safe;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _modifications_type;
  _modifications_type modifications;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _stability_aware_plan_type;
  _stability_aware_plan_type stability_aware_plan;





  typedef boost::shared_ptr< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StabilityAnalysisResponse_

typedef ::multi_agent_system::StabilityAnalysisResponse_<std::allocator<void> > StabilityAnalysisResponse;

typedef boost::shared_ptr< ::multi_agent_system::StabilityAnalysisResponse > StabilityAnalysisResponsePtr;
typedef boost::shared_ptr< ::multi_agent_system::StabilityAnalysisResponse const> StabilityAnalysisResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator1> & lhs, const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_safe == rhs.is_safe &&
    lhs.modifications == rhs.modifications &&
    lhs.stability_aware_plan == rhs.stability_aware_plan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator1> & lhs, const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_agent_system

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4301bd8d3f19ce7a86b1da814ac6f070";
  }

  static const char* value(const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4301bd8d3f19ce7aULL;
  static const uint64_t static_value2 = 0x86b1da814ac6f070ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_agent_system/StabilityAnalysisResponse";
  }

  static const char* value(const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_safe\n"
"string modifications\n"
"string stability_aware_plan\n"
"\n"
;
  }

  static const char* value(const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_safe);
      stream.next(m.modifications);
      stream.next(m.stability_aware_plan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StabilityAnalysisResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_agent_system::StabilityAnalysisResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_safe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_safe);
    s << indent << "modifications: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.modifications);
    s << indent << "stability_aware_plan: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.stability_aware_plan);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_AGENT_SYSTEM_MESSAGE_STABILITYANALYSISRESPONSE_H
